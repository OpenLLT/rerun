searchState.loadedDescShard("rerun_bindings", 0, "The Rerun Python Log SDK.\nMethods for handling Arrow datamodel log ingest\nPerform conversion between a pyarrow array to arrow types.\nBuild a <code>Chunk</code> given a ‘**kwargs’-style dictionary of …\nBuild a <code>PendingRow</code> given a ‘**kwargs’-style dictionary …\nPerform Python-to-Rust conversion for a <code>ComponentDescriptor</code>…\nA type alias for either a <code>VectorDistanceMetric</code> enum or a …\nA type alias for a vector (vector search input data).\nError handling for the catalog module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister the <code>rerun.catalog</code> module.\nA type alias for a vector (vector search input data).\nA connection to a remote storage node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new catalog client object.\nConnection handle to a catalog service.\nThe actual tonic connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PyErr</code> of this type.\nConvert a <code>ViewContentsLike</code> into a <code>ViewContentsSelector</code>.\nPopulate any null values in a row with the latest valid …\nFilter the view to only include data at the provided index …\nFilter the view to only include rows where the given …\nFilter the view to only include data between the given …\nFilter the view to only include data between the given …\nFilter the view to only include data between the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimit the query to these partition ids.\nReplace the index in the view with the provided values.\nReturn the Arrow schema of the data contained in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the partition table as a Datafusion table provider.\nReturn the URL for the given partition.\nRegister a RRD URI to the dataset.\nA unique identifier for an entry in the catalog.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrivate error type to server as a bridge between various …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGlobal mapping of all our internal error to user-facing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type alias for any component-column-like object.\nA type alias for any component-column-like object.\nA type alias for index values.\nThe descriptor of a component column.\nA selector for a component column.\nThe descriptor of an index column.\nA selector for an index column.\nAn archive loaded from an RRD.\nA single Rerun recording.\nA view of a recording restricted to a given index, …\nIterate over all the column descriptors in the schema, …\nAll the recordings in the archive.\nThe application ID of the recording.\nLook up the column descriptor for a specific entity path …\nReturn a list of all the component columns in the schema.\nThe component name.\nThe component name.\nThe entity path.\nThe entity path.\nConvert a <code>ViewContentsLike</code> into a <code>ViewContentsSelector</code>.\nPopulate any null values in a row with the latest valid …\nFilter the view to only include data at the provided index …\nFilter the view to only include rows where the given …\nFilter the view to only include data between the given …\nDEPRECATED: Renamed to <code>filter_range_secs</code>.\nFilter the view to only include data between the given …\nFilter the view to only include data between the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of all the index columns in the schema.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPart of generic ColumnDescriptor interface: always False …\nWhether the column is static.\nLoad a rerun archive from an RRD file.\nLoad a single recording from an RRD file.\nThe name of the index.\nThe name of the index.\nCreate a new <code>IndexColumnSelector</code>.\nCreate a new <code>ComponentColumnSelector</code>.\nThe number of recordings in the archive.\nThe recording ID of the recording.\nRegister the <code>rerun.dataframe</code> module.\nThe schema describing all the columns available in the …\nThe schema describing all the columns available in the …\nSelect the columns from the view.\nSelect only the static columns from the view.\nReplace the index in the view with the provided values.\nCreate a [<code>RecordingView</code>][rerun.dataframe.RecordingView] of …\nRelease Callbacks\nCreate a new binary stream sink, and return the associated …\nCleans up internal state if this is the child of a forked …\nConcatenate the contents of the <code>MemorySinkStorage</code> as bytes.\nConnect the recording stream to a remote Rerun Viewer on …\nSpecial binding for directly sending a blueprint stream to …\nClear time information for the specified timeline on this …\nDisconnect from remote server (if any).\nDrain all messages logged to the <code>MemorySinkStorage</code> and …\nEscape an entity path.\nBlock until outstanding data has been flushed to the sink.\nFlush the binary sink manually.\nFlushes the <code>GARBAGE_QUEUE</code>, therefore running all the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an url to an instance of the web-viewer.\nGet the current recording stream’s application ID.\nReturns the currently active blueprint recording in the …\nReturns the currently active data recording in the global …\nReturns the currently active blueprint recording in the …\nReturns the currently active data recording in the global …\nGet the current recording stream’s recording ID.\nReturns the currently active blueprint recording in the …\nReturns the currently active data recording in the …\nThe underlying binary sink storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the recording stream enabled.\nDetermine if this stream is operating in the context of a …\nLog an arrow message.\nLog a file by contents.\nLog a file by path.\nCreate an in-memory rrd file.\nCreate a new blueprint stream.\nCreate an entity path.\nCreate a property entity path.\nCreate a new recording stream.\nCount the number of pending messages in the …\nRead the bytes from the binary sink.\nThe python module is called “rerun_bindings”.\nClear all timeline information on this thread.\nSave the recording stream to a file.\nSpecial binding for directly savings a blueprint stream to …\nDirectly send an arrow chunk to the recording stream.\nSend a blueprint to the given recording stream.\nHelper for forwarding the blueprint memory-sink …\nSend all chunks from a <code>PyRecording</code> to the given recording …\nSend the name of the recording.\nSend the start time of the recording.\nSpawn a gRPC server which an SDK or Viewer can connect to.\nServe a web-viewer.\nSet callback sink.\nReplaces the currently active recording in the global …\nReplaces the currently active recording in the global …\nReplaces the currently active recording in the …\nReplaces the currently active recording in the …\nSet the current duration for this thread in nanoseconds.\nSet the current time for this thread as an integer …\nSet the current time for this thread in nanoseconds.\nShutdown the Rerun SDK.\nSpawn a new viewer.\nStart a web server to host the run web-assets.\nSave to stdout.\nReturn a verbose version string.\nUtility to get the Tokio Runtime from Python\nReads the timestamps of all frames in a video asset.")